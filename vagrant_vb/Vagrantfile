# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  ###############
  # PLUGIN CONFIG
  ###############

  #vagrant plugin install vagrant-triggers vagrant-cachier vagrant-vbguest
  unless Vagrant.has_plugin?("vagrant-triggers")
     abort "[Error] vagrant-triggers plugin not found - please install it"
  end

  # These vm's download lots of packages, so caching can improve
  # performance when creating new machines.
  #
  # vagrant-cachier : https://github.com/fgrehm/vagrant-cachier

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.auto_detect = true
  else
    # only display the tips on vagrant up
    if ARGV[0] == "up"
      puts "[information] recommended vagrant plugin 'vagrant-cachier' plugin was not found" 
      puts "[information] 'vagrant-cachier' will speed up repeated provisioning operations" 
    end
  end

  # Use the vbguest plugin to keep the guest os virtualbox utils
  # in line with the host's virtualbox version
  #
  # vbguest : https://github.com/dotless-de/vagrant-vbguest

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  else 
    # only display the tips on vagrant up
    if ARGV[0] == "up"
      puts "[information] recommended vagrant plugin 'vagrant-vbguest' plugin was not found" 
      puts "[information] please consider installing 'vagrant-vbguest'" 
    end
  end

  config.vm.synced_folder ".", "/vagrant", type: "rsync",
    rsync__exclude: ".git/"

  config.vm.provision "shell", inline: "sudo locale-gen en_US.UTF-8"
  config.ssh.insert_key = false

  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.customize ["modifyvm", :id, "--memory", "2048"]
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]

  end

  config.vm.define "ubuntu" do |ubuntu|
    #ubuntu.vm.box = "ubuntu/trusty64"
    ubuntu.vm.box = "bento/ubuntu-16.04"
    ubuntu.vm.network "private_network", ip: "192.168.33.20"

     # The host machine can use Remote Desktop Connection (windows) or
     # rdesktop (linux/osx) to connect to localhost:4480 the username
     # and password is vagrant/vagrant
    ubuntu.vm.network "forwarded_port", guest: 3389, host: 4480

    ubuntu.vm.provider :virtualbox do |vb|
      file_to_disk = File.realpath( "." ).to_s + "/disk100.vdi"
      if ARGV[0] == "up" && ! File.exists?(file_to_disk)
        puts "Creating 100GB disk #{file_to_disk}."
        vb.customize [
          'createhd',
          '--filename', file_to_disk,
          '--format', 'VDI',
          '--size', 100 * 1024 * 1024 # 100GB
          ]
        vb.customize [
          'storageattach', :id,
          '--storagectl', 'SATAController',
          '--port', 1, '--device', 0,
          '--type', 'hdd', '--medium',
          file_to_disk
          ]
      end
    end

    ubuntu.vm.provision "shell", inline: <<-SHELL
      echo "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA1fwtpwzYdB76K4ll9m0SVnSWTZByXmrFrfvTZu2PUAcQ8nicKm5zbujozGERQ+6qM9rfRLVxLfULJ57xzKWJmmyl9o6jP/q6pXECVplscjrNDVWUxJCh+MspsiCH/uebyl6lTqENVTNuxCE4hwb03WMdoLGxCOWgEzvS4OjVozTuMaBMOgmAGP440xYT4lZtU65b29OP+PAcI2Nzr3afziwQ4MD7KSBVAg6R20eu82VAAXF2M8MXFdRxc0tPvhFHPey7rlKjLFKDy93xBvXscvhfHuKsaVZgmLftmIcwNcZ4/khSuZJkKduzmaKHqJFHoXOa7NYIP7rEIj9Bge/piw== rsa-key-20150622" >> /root/.ssh/authorized_keys
      echo "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA1fwtpwzYdB76K4ll9m0SVnSWTZByXmrFrfvTZu2PUAcQ8nicKm5zbujozGERQ+6qM9rfRLVxLfULJ57xzKWJmmyl9o6jP/q6pXECVplscjrNDVWUxJCh+MspsiCH/uebyl6lTqENVTNuxCE4hwb03WMdoLGxCOWgEzvS4OjVozTuMaBMOgmAGP440xYT4lZtU65b29OP+PAcI2Nzr3afziwQ4MD7KSBVAg6R20eu82VAAXF2M8MXFdRxc0tPvhFHPey7rlKjLFKDy93xBvXscvhfHuKsaVZgmLftmIcwNcZ4/khSuZJkKduzmaKHqJFHoXOa7NYIP7rEIj9Bge/piw== rsa-key-20150622" >> /home/vagrant/.ssh/authorized_keys
#      apt-get update; apt-get install -y python
#      yum install -y python
    SHELL

    ubuntu.vm.synced_folder File.expand_path("~/.m2"),
      "/home/vagrant/.m2/",
      :create => true,
      :mount_option => "dmode=777,fmode=666"

#    ubuntu.vm.provision "shell", path: "./add_new_disk.sh"

    ubuntu.vm.provision "ansible" do |ansible|
      ansible.limit = 'all'
#      ansible.playbook = "../ipsec.yml"
      ansible.playbook = "../dev.yml"
      ansible.inventory_path = "ansible_hosts"
      ansible.host_key_checking = false
      ansible.sudo = true
    end
  end

end

